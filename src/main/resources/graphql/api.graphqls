
schema {
    query: Query
    mutation: Mutation
}
## Mutation -> promena na podacima (dodavanje, edit, brisanje)
type Mutation {
    register(name: String!,dateBirth: String!, adress: String!, password: String!, lastName: String!, username: String!, phoneNumber: String!, email: String!) : Boolean!
    deleteUser(idUser: ID!): Boolean
    editUser(idUser: Int!, name: String!, lastName: String!, email: String!, adress: String!, phoneNumber: String!, dateBirth: String!, username: String!): Boolean!
    createWorkoutRoom(capacity: Int!, name: String!): Boolean!
    deleteWorkoutRoom(idWorkoutRoom: Int!): Boolean!
    createTraining(prices: Int!, levelTraining: String!, trainingDuration: Int!, trainer: String!, trainingKind: String!, description: String!, name: String!, photo: String): Boolean!
    editTraining(idTraining: Int!, prices: Int!, levelTraining: String!, trainingDuration: Int!, trainer: String!, trainingKind: String!, description: String!, name: String!, photo: String): Boolean!
    createTrainingSchedule(trainingId: Int!, workoutRoomId: Int!, dateTime: String!): Boolean!
    createComment(idTraining: Int!, rate: Int!, anonymous: String!, text: String!) : Boolean!
    processComment(idComment: Int!, approved: Boolean!): Boolean!
    shoppingCart(idTrainingSchedule: Int!, numberPoint: Int!): Boolean!
    processShoppingCart(accepted: Boolean!):Boolean!

}
## citanje podataka
type Query {
    login(username: String!, password: String!): LoggedInUser
    user(idUser: Int!): User
    workoutRooms: [WorkoutRoom]
    allUsers: [User]
    profil: User
    trainings(filter: String, priceFrom: Int, priceTo: Int, sort: String): [Training]
    training(idTraining: Int!): Training
    commentForTraining(idTraining: Int): [Comment]
    commentForApproval: [Comment]
    viewReservation(shoppingCart: Boolean): [Reservation]
    statistics(dateFrom: String, dateTo: String): [Statistics]
}

type User{
    id: ID!,
    adress: String,
    phoneNumber: String,
    dateRegister: String,
    dateBirth: String,
    email: String,
    name: String,
    username: String,
    lastName: String,
    role: String,
    comments: [Comment],
    loyaltyCard: LoyaltyCard,
    reservations: [Reservation],
    wishs: [Wish]
}

type Training{
    id: ID!
    prices: Int,
    name: String!
    levelTraining: String,
    description: String,
    photo: String,
    trainingDuration: Int,
    trainer: String,
    trainingKind: String,
    comments: [Comment],
    trainingSchedules: [TrainingSchedule]
    trainingType: [TrainingTypes],
    wishs: [Wish]
}
type Wish {
    id: ID!,
    user: User,
    training: Training
}
type WorkoutRoom {
    id: ID!
    capacity: Int,
    name: String,
    trainingSchedule: [TrainingSchedule],

}

type TrainingSchedule{
    id: ID!,
    dateTime: String,
    reservations: [Reservation],
    workoutRoom: WorkoutRoom,
    training: Training

}
type Reservation {
    id: ID!
    confirmation: Boolean,
    user: User,
    trainingSchedule: TrainingSchedule
}

type PurchasedTraining{
    id: ID!
    user: User
    trainingSchedule: TrainingSchedule
}

type LoyaltyCard{
    id: ID!
    point: Int,
    discount: Int,
}
type LoggedInUser {
    id: ID!
    token: String,
    username: String,
    email: String,
    authorities: [String]
}

type Comment{
    id: ID!
    anonymous: Boolean!,
    rate: Int!,
    text: String!,
    datePost: String,
    user: User,
    statusComments: StatusComment,
    training: Training,
}

type StatusComment {
    id: ID!
    name: String!,
    comments: [Comment]
}

type TrainingTypes {
    id: ID!
    name: String,
    description: String,
    trainings: [Training]
}

enum Role{
    USER
    ADMINISTRATOR
    INSTRUCTOR
    UNREGISTERED
}

type Statistics {
    idTraining: Int,
    numberReservation: Int,
    earnings: Int,
    trainer: String,
    nameTraining: String
}


#mutation {
#    addUser(user: {username: "pera", password: "123", email: "pera@gmail.com", name: "Petar", lastName: "medic", adress: "adress", phoneNumber: "4556", role: USER, dateRegister: "2022-03-04", active: true})
#    {
#        id
#    }
#
#    deleteUser(id: 12)
#}
#query {
#
#    userById(id: 1){
#        id
#        name
#        email
#    }
#
#    allUsers{
#        id
#        name
#    }